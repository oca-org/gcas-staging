# Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.

version: 0.1
component: build
timeoutInSeconds: 1000
shell: bash
env:
  variables:
    PYTHON_CMD: "python3"
    CDXGEN_DEBUG_MODE: "debug"

steps:
  - type: Command
    name: "Download and extract the repo from GitHub"
    command: |
      mkdir github-artifact
      curl -sS -L -H "Authorization: token ${INPUT_GITHUB_TOKEN}" https://api.github.com/repos/${INPUT_REPOSITORY_FULL_NAME}/tarball/${INPUT_COMMIT_ID} | tar -xz --strip-components=1 --directory=github-artifact
  - type: Command
    name: "Download the version 10.10.0 of cdxgen globally"
    command: |
      npm install -g @cyclonedx/cdxgen@10.10.0
  - type: Command
    name: "workaround to let cdxgen run on nodejs 16"
    command: |
      cd /node/node-v16.14.2-linux-x64/lib/node_modules/@cyclonedx/cdxgen && \
      npm install cheerio@v1.0.0-rc.12

  - type: Command
    name: "Run cycloneDX SBOM generation command"
    command: |
      cd $OCI_PRIMARY_SOURCE_DIR/github-artifact
      input=${INPUT_AUTO_BUILD_TYPES}
      [ -z "$input" ] && exit 1
      IFS=', ' read -r -a ecosystems <<< "$input"
      repo_root_path=$(pwd)
      mkdir -p sboms
      sbom_files=()
      for ecosystem in "${ecosystems[@]}"; do
        case $ecosystem in
          MAVEN)
            echo "[GCAS-INFO] : Maven found "
              sbom_file="$repo_root_path/sboms/sbom-maven.json"
              mvnorg.cyclonedx:cyclonedx-maven-plugin:2.7.5:makeAggregateBom \
                  -DincludeRuntimeScope=true -DincludeCompileScope=true -DincludeProvidedScope=false \
                  -DincludeSystemScope=false -DincludeTestScope=false -DoutputFormat=json \
                  -DoutputName=artifactSBOM -DschemaVersion=1.4
              cat "$dir/target/artifactSBOM.json" >> "$sbom_file"
              sbom_files+=("$sbom_file")
            ;;
          GRADLE)
            echo "[GCAS-INFO] : gradle found"
            yum -y install graalvm21-ee-11-jdk
            export JAVA_HOME=/usr/lib64/graalvm/graalvm21-ee-java11
            export PATH=$JAVA_HOME/bin:$PATH 
            GRADLE_CMD="${dir}/gradlew"
            [[ ! -x "$GRADLE_CMD" ]] && GRADLE_CMD="gradle"
            sbom_file="$repo_root_path/sboms/sbom-gradle.json"
            cat <<EOF > init.gradle
              initscript {
                repositories { maven { url "https://plugins.gradle.org/m2/" } }
                dependencies { classpath "org.cyclonedx:cyclonedx-gradle-plugin:1.7.4" }
              }
              allprojects {
                apply plugin: org.cyclonedx.gradle.CycloneDxPlugin
                cyclonedxBom {
                  includeConfigs = ["runtimeClasspath", "compileClasspath"]
                  skipConfigs = ["testCompileClasspath"]
                  projectType = "application"
                  destination = file("$(dirname "$sbom_file")")
                  outputName = "sbom-gradle"
                  outputFormat = "json"
                  schemaVersion = "1.4"
                }
              }
      EOF
            $GRADLE_CMD --init-script init.gradle cyclonedxBom -info
            sbom_files+=("$sbom_file")
            ;;
          NPM)
            echo "[GCAS-INFO] : Npm found"
            sbom_file="$repo_root_path/sboms/sbom-npm.json"
            echo "[GCAS-INFO] : run npm install"
            npm install
            echo "[GCAS-INFO] : install @cyclonedx/cyclonedx-npm"
            npm install --save-dev @cyclonedx/cyclonedx-npm@1.19.3
            echo "[GCAS-INFO] : run the cycloneDx command"
            npx @cyclonedx/cyclonedx-npm --omit dev --output-format JSON --output-file "$sbom_file" --spec-version 1.4 --ignore-npm-errors
            sbom_files+=("$sbom_file")
            ;;
          PYPI)
            echo "[GCAS-INFO] : pypi found"
            REPONAME=$(basename "$INPUT_REPOSITORY_FULL_NAME")
            sbom_file="$repo_root_path/sboms/sbom-pypi.json"
            exclude_files=$(find "$dir" -maxdepth 1 -type f -regex ".*\(test.*requirements\|requirements.*test\|dev.*requirements\|requirements.*dev\).*\.txt")
            if [[ -n "$exclude_files" ]]; then
                cdxgen -t python --spec-version 1.4 --exclude "*{requirements,dev,test}*{requirements,dev,test}*.txt" \
                  -o "$sbom_file" --no-recurse --project-name "$REPONAME" "$dir"
            else
                cdxgen -t python --spec-version 1.4 \
                  -o "$sbom_file" --no-recurse --project-name "$REPONAME" "$dir"
            fi
            sbom_files+=("$sbom_file")
            ;;
          GOLANG)
            echo "[GCAS-INFO] : golang found"
            GO_VERSION="1.22.3"
            INSTALL_DIR="${OCI_PRIMARY_SOURCE_DIR}"
            wget -O go-${GO_VERSION}.tar.gz https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
            tar -C ${INSTALL_DIR} -xzf go-${GO_VERSION}.tar.gz
            export GOROOT=${INSTALL_DIR}/go
            export PATH=${GOROOT}/bin:${PATH}
              sbom_file="$repo_root_path/sboms/sbom-golang.json"
              (go mod tidy || echo "go mod tidy failed, continuing..." && cdxgen -t golang -o "$sbom_file" --spec-version 1.4 --no-recurse)
              sbom_files+=("$sbom_file")
            ;;
        esac
      done
      wget https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.2/cyclonedx-linux-x64
      yum install -y libicu
      chmod +x cyclonedx-linux-x64
      ./cyclonedx-linux-x64 merge --input-files "${sbom_files[@]}" --output-file ${OCI_PRIMARY_SOURCE_DIR}/artifactSBOM.json
      rm -f maven_files.txt gradle_files.txt npm_files.txt pypi_files.txt golang_files.txt

outputArtifacts:
  - name: artifactSBOM
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/artifactSBOM.json
